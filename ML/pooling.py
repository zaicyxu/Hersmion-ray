# -*- coding: utf-8 -*-
"""Pooling

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17DjQj--2emcWrnYZkIbvtgEbjmek9XYL
"""

# -*- coding: utf-8 -*-
#!/usr/bin/env python

"""
@Project Name  ColabProject_MachineLearning_Note
@File Name:    Pooling
@Software:     Google Colab
@Time:         06/Jan/2022
@Author:       zaicy
@contact:      zaicyxu@gmail.com
@version:      1.0
@Description:  according to Dr.Mu Li
"""

import tensorflow as tf


def pool2d(X, pool_size, mode='max'):
    p_h, p_w = pool_size
    Y = tf.Variable(tf.zeros((X.shape[0] - p_h + 1, X.shape[1] - p_w +1)))
    for i in range(Y.shape[0]):
        for j in range(Y.shape[1]):
            if mode == 'max':
                Y[i, j].assign(tf.reduce_max(X[i: i + p_h, j: j + p_w]))
            elif mode =='avg':
                Y[i, j].assign(tf.reduce_mean(X[i: i + p_h, j: j + p_w]))
    return Y

X = tf.constant([[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]])
pool2d(X, (2, 2))

pool2d(X, (2, 2), 'avg')

"""Padding and stride"""

X = tf.reshape(tf.range(16, dtype=tf.float32), (1, 4, 4, 1))
Xm

pool2d = tf.keras.layers.MaxPool2D(pool_size=[3, 3])
pool2d(X)

paddings = tf.constant([[0, 0], [1,0], [1,0], [0,0]])
X_padded = tf.pad(X, paddings, "CONSTANT")
pool2d = tf.keras.layers.MaxPool2D(pool_size=[3, 3], padding='valid',
                                   strides=2)
pool2d(X_padded)

paddings = tf.constant([[0, 0], [0, 0], [1, 1], [0, 0]])
X_padded = tf.pad(X, paddings, "CONSTANT")

pool2d = tf.keras.layers.MaxPool2D(pool_size=[2, 3], padding='valid',
                                   strides=(2, 3))
pool2d(X_padded)

"""Multiple Channels"""

X = tf.concat([X, X + 1], 3)  # Concatenate along `dim=3` due to channels-last syntax

paddings = tf.constant([[0, 0], [1,0], [1,0], [0,0]])
X_padded = tf.pad(X, paddings, "CONSTANT")
pool2d = tf.keras.layers.MaxPool2D(pool_size=[3, 3], padding='valid',
                                   strides=2)
pool2d(X_padded)